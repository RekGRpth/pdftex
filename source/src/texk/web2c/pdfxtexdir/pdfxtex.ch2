%
% Copyright (c) 1996-2002 Han The Thanh, <thanh@pdftex.org>
%
% This file is part of pdfTeX.
%
% pdfTeX is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
%
% pdfTeX is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with pdfTeX; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
%
% $Id: pdfxtex.ch2,v 1.1 2004/02/26 13:40:36 thanh Exp $
%
@x limbo
\def\pdfTeX{pdf\TeX}
@y
\def\pdfTeX{pdf\TeX}
\def\pdfeTeX{pdf\eTeX}
@z

@x [2]
@d banner=='This is pdfTeX, Version 3.141592','-',pdftex_version_string 
   {printed when \pdfTeX\ starts}
@y
@d banner=='This is pdfxTeX, Version 3.141592','-',pdftex_version_string,'-',eTeX_version_string
   {printed when \pdfTeX\ starts}
@z

@x [2]
@d eTeX_version_string=='3.141592-2.1' {current \eTeX\ version}
@y
@d eTeX_version_string=='2.1' {current \eTeX\ version}
@z

@x [230]
@d pdftex_first_loc       = local_base+10 {first number defined in this section}
@y
@d pdftex_first_loc       = token_base+10 {first number defined in this section}
@z

% @x [230]
% @d toks_base=local_base+13 {table of 256 token list registers}
% @y
% @d toks_base=token_base+13 {table of 256 token list registers}
% @z

@x [307]
@d pdftex_first_text       = 16 {first number defined in this section}
@y
@d pdftex_first_text       = 17 {first number defined in this section}
@z

@x [307]
@d write_text=15 {|token_type| code for \.{\\write}}
@y
@d write_text=16 {|token_type| code for \.{\\write}}
@z

@x [410]
@d pdftex_first_expand_code = 6 {first number defined in this section}
@y 
@d pdftex_first_expand_code = 7 {first number defined in this section}
@z
% N.B.: eTeX_revision_code = 6 has been already defined by eTeX

@x [416]
|glue_val|, |input_line_no_code|, |badness_code|, or one of the other codes for
\pdfTeX{} extensions.
@y
|glue_val|, |input_line_no_code|, |badness_code|, or one of the other codes for
\pdfTeX\ or \eTeX\ extensions.
@z

@x [416]
@d pdftex_first_rint_code     = glue_val + 3 {first number defined in this section}
@y
@d last_node_type_code=glue_val+3 {code for \.{\\lastnodetype}}
@d pdftex_first_rint_code     = glue_val + 4 {first number defined in this section}
@z

@x [416]
@d badness_code=glue_val+2 {code for \.{\\badness}}
@y
@d badness_code=glue_val+2 {code for \.{\\badness}}
@d eTeX_int=pdftex_last_rint_code+2 {first of \eTeX\ codes for integers}
@d eTeX_dim=eTeX_int+8 {first of \eTeX\ codes for dimensions}
@d eTeX_glue=eTeX_dim+9 {first of \eTeX\ codes for glue}
@d eTeX_mu=eTeX_glue+1 {first of \eTeX\ codes for muglue}
@d eTeX_expr=eTeX_mu+1 {first of \eTeX\ codes for expressions}
@z
% N.B.: pdftex_last_rint_code + 1 is used for \pdfstrcmp

@x [424]
if cur_chr>glue_val then
  begin case cur_chr of
@y
if m>last_node_type_code then
 if m>=eTeX_glue then @<Process an expression and |return|@>@;
 else if m>=eTeX_dim then
  begin case m of
  @/@<Cases for fetching a dimension value@>@/
  end; {there are no other cases}
  cur_val_level:=dimen_val;
  end
 else begin case m of
@z

@x
  endcases;
@y
  @/@<Cases for fetching an integer value@>@/
  end; {there are no other cases}
@z

@x [32f]
@!g_order: glue_ord; {applicable order of infinity for glue}
@y
@z

@x [32f]
@!edge:scaled; {left edge of sub-box, or right edge of leader space}
@y
@!edge:scaled; {right edge of sub-box or leader space}
@!prev_p:pointer; {one step behind |p|}
@z

@x [32f]
begin this_box:=temp_ptr; g_order:=glue_order(this_box);
@y
begin this_box:=temp_ptr;
@z

@x [32f]
base_line:=cur_v; left_edge:=cur_h;
@y
base_line:=cur_v;
prev_p:=this_box+list_offset;
if eTeX_ex then
  begin @<Initialize the LR stack@>;
  if subtype(this_box)=dlist then
    if cur_dir=right_to_left then
      begin cur_dir:=left_to_right; cur_h:=cur_h-width(this_box);
      end
    else subtype(this_box):=min_quarterword;
  if (cur_dir=right_to_left)and(subtype(this_box)<>reversed) then
    @<Reverse the complete hlist and set the subtype to |reversed|@>;
  end;
left_edge:=cur_h;
@z

@x [32f]
decr(cur_s);
@y
if eTeX_ex then
  begin @<Check for LR anomalies at the end of |hlist_out|@>;
  if subtype(this_box)=dlist then cur_dir:=right_to_left;
  end;
decr(cur_s);
@z

@x [32f]
  p:=link(p);
@y
  prev_p:=link(prev_p); {N.B.: not |prev_p:=p|, |p| might be |lig_trick|}
  p:=link(p);
@z

@x [32f]
kern_node,math_node:cur_h:=cur_h+width(p);
@y
kern_node:cur_h:=cur_h+width(p);
math_node:begin if eTeX_ex then
    @<Adjust \(t)the LR stack for the |hlist_out| routine; if necessary
      reverse an hlist segment and |goto reswitch|@>;
  cur_h:=cur_h+width(p);
  end;
@z

@x [32f]
othercases do_nothing
@y
@/@<Cases of |hlist_out| that arise in mixed direction text only@>@;
othercases do_nothing
@z

@x [32f]
next_p:p:=link(p);
@y
next_p:prev_p:=p; p:=link(p);
@z

@x [32f]
  temp_ptr:=p; edge:=cur_h;
@y
  temp_ptr:=p; edge:=cur_h+width(p);
  if cur_dir=right_to_left then cur_h:=edge;
@z

@x [32f]
  cur_h:=edge+width(p); cur_v:=base_line;
@y
  cur_h:=edge; cur_v:=base_line;
@z

@x [32f]
  begin if g_sign=stretching then
    begin if stretch_order(g)=g_order then
      rule_wd:=rule_wd+round(float(glue_set(this_box))*stretch(g));
@^real multiplication@>
    end
  else  begin if shrink_order(g)=g_order then
      rule_wd:=rule_wd-round(float(glue_set(this_box))*shrink(g));
    end;
  end;
@y
  add_glue(rule_wd);
@z

@x [32f]
  edge:=cur_h+rule_wd; lx:=0;
@y
  if cur_dir=right_to_left then cur_h:=cur_h-10;
  edge:=cur_h+rule_wd; lx:=0;
@z

@x [32f]
  cur_h:=edge-10; goto next_p;
@y
  if cur_dir=right_to_left then cur_h:=edge
  else cur_h:=edge-10;
  goto next_p;
@z

@x [32f]
save_h:=cur_h; temp_ptr:=leader_box;
@y
save_h:=cur_h; temp_ptr:=leader_box;
if cur_dir=right_to_left then cur_h:=cur_h+leader_wd;
@z

@x [32f]
@!g_order: glue_ord; {applicable order of infinity for glue}
@y
@z

@x [32f]
begin this_box:=temp_ptr; g_order:=glue_order(this_box);
@y
begin this_box:=temp_ptr;
@z

@x [32f]
  cur_h:=left_edge+shift_amount(p); {shift the box right}
@y
  if cur_dir=right_to_left then cur_h:=left_edge-shift_amount(p)
  else cur_h:=left_edge+shift_amount(p); {shift the box right}
@z

@x [32f]
if (rule_ht>0)and(rule_wd>0) then {we don't output empty rules}
  pdf_set_rule(cur_h, cur_v, rule_wd, rule_ht);
@y
if (rule_ht>0)and(rule_wd>0) then {we don't output empty rules}
  begin if cur_dir=right_to_left then cur_h:=cur_h-rule_wd;
  pdf_set_rule(cur_h, cur_v, rule_wd, rule_ht);
  cur_h:=left_edge;
  end;
@z

@x [32f]
  begin if g_sign=stretching then
    begin if stretch_order(g)=g_order then
      rule_ht:=rule_ht+round(float(glue_set(this_box))*stretch(g));
@^real multiplication@>
    end
  else  begin if shrink_order(g)=g_order then
      rule_ht:=rule_ht-round(float(glue_set(this_box))*shrink(g));
    end;
  end;
@y
  add_glue(rule_ht);
@z

@x [32f]
begin cur_h:=left_edge+shift_amount(leader_box);@/
@y
begin if cur_dir=right_to_left then
  cur_h:=left_edge-shift_amount(leader_box)
  else cur_h:=left_edge+shift_amount(leader_box);
@z

@x [32f]
@<(\pdfTeX) Ship box |p| out@>;
@y
@<(\pdfTeX) Ship box |p| out@>;
if eTeX_ex then @<Check for LR anomalies at the end of |ship_out|@>;
@z

@x [33]
exit:
if (m = cal_expand_ratio) and (font_expand_ratio <> 0) then begin
    font_expand_ratio := fix_int(font_expand_ratio, -1000, 1000);
    q := list_ptr(r);
    free_node(r, box_node_size);
    r := hpack(q, w, subst_ex_font);
end;
hpack:=r;
@y
exit: if TeXXeT_en then @<Check for LR anomalies at the end of |hpack|@>;
if (m = cal_expand_ratio) and (font_expand_ratio <> 0) then begin
    font_expand_ratio := fix_int(font_expand_ratio, -1000, 1000);
    q := list_ptr(r);
    free_node(r, box_node_size);
    r := hpack(q, w, subst_ex_font);
end;
hpack:=r;
@z

@x [651] 
  math_node: x:=x+width(p);
@y
  math_node: begin x:=x+width(p);
    if TeXXeT_en then @<Adjust \(t)the LR stack for the |hpack| routine@>;
    end;
@z

@x [1147] 
kern_node,math_node: d:=width(p);
@y
kern_node: d:=width(p);
@t\4@>@<Cases of `Let |d| be the natural width' that need special treatment@>@;
@z
