#! /usr/bin/env bash
# $Header$
# $Name$
# Baut neue pdfTeX-Binaries
# Voraussetzung sind zwei Verzeichnisse foo/src und foo/build 
# Aufruf des Scripts sollte in foo/Build erfolgen
# Locals: DO_PURIFY, JOBS, MAKE, ONLY_MAKE, OPTIMIZE, STRIP, STRIPOPT
# Optionen: 
#       --make      : nur make, kein make distclean; configure
#       --optimize  : Ergebnis optimieren
#       --paralle   l: -j3 an make reichen
#       --purify    : Für purify compilieren
#       --strip:    Ergebnis strippen
ONLY_MAKE=FALSE
DO_PURIFY=FALSE
OPTIMIZE=FALSE
JOBS=1
STRIP=FALSE
while [ "$1" != "" ] ; do
    if [ "$1" = "--make" ] ;
    then ONLY_MAKE=TRUE ;
    elif [ "$1" = "--purify" ] ;
    then DO_PURIFY=TRUE ;
    elif [ "$1" = "--parallel" ] ;
    then JOBS=2 ;
    elif [ "$1" = "--strip" ] ;
    then STRIP=TRUE ;
    elif [ "$1" = "--optimize" ] ;
    then OPTIMIZE=TRUE ;
    fi ;
    shift ;
done
# standard CFLAGS sind -g -O2: Wir wollen aber nur Optimierung (debug würde eh'
# weggestrippt)
CFLAGS="-g " # -DPDFTEX_COPY_PAGEGROUP=1 -DPDFTEX_COPY_PAGEGROUP_NOFAIL=1"
#CFLAGS=$CFLAGS"-Wall -pedantic -Wwrite-strings -Wcast-align -Wpointer-arith -Wcast-qual"
if [ $OPTIMIZE = "TRUE" ]
then CFLAGS="-O2 "$CFLAGS
fi
if [ $DO_PURIFY = "TRUE" ]
then CC="purify gcc"
     CXX="purify g++"
     LD="purify ld"
     CFLAGS="-g"
     export CC CXX LD
fi
export CFLAGS
CXXFLAGS=$CFLAGS
export CXXFLAGS
# CXXFLAGS="-DPDFTEX_USE_CROPBOX=0"
# export CXXFLAGS
STRIPOPT=""
MAKE=make
case $OS in
  # Linux: statische Binaries erzeugen
  # Linux) LDFLAGS=-static;
  #       export LDFLAGS;
  #       ;;
  # Solaris: Libs finden
  SunOS) # Solaris: Libs finden
         LIBS="-lgen"
         export LIBS
         if [ $HOST = "bro0" ] ;
         # Die bro0 braucht eine Sonderbehandlung, da dort das X nicht
         # richtig installiert ist (die Header passen nicht zum Binary)
         then
  	      LDFLAGS="-L/usr/local/lib -R/usr/local/lib";
              export LDFLAGS
              CFLAGS="-I/usr/openwin/include";
              export CFLAGS;
              Extra_Configure_Flags="--without-oxdvik --without-xdvik";
	 elif [ $HOST = "artcom5" ] ;
	 # auf der artcom5 liegt der aktuelle gcc/g++ unter /opt/sfw/bin/
         then
  	      CXX="/opt/sfw/bin/g++";
  	      CC="/opt/sfw/bin/gcc";
              export CXX CC;
         fi
	 MAKE=gmake
         ;;# Irix: strip ruhigstellen
  IRIX)  STRIPOPT="-S";
         ;;
esac
#
if [ -e Makefile -a $ONLY_MAKE = "FALSE" ]
then
    # vor dem Build aufräumen
    $MAKE -j $JOBS distclean;
elif [ ! -e Makefile ]
then
    # wenn's kein Makefile gibt, müssen wir alles bauen
    ONLY_MAKE=FALSE
fi
#
if [ $ONLY_MAKE = "FALSE" ]
then
    # diverse Dinge abstellen, die wir nicht brauchen
    ../src/configure \
        --disable-shared        \
        --with-cxx-runtime-hack \
        --without-bibtex8   \
        --without-t1utils   \
        --without-dialog    \
        --without-texinfo   \
        --without-dtl       \
        --without-dvi2tty   \
        --without-dvidvi    \
        --without-dviljk    \
        --without-dvipdfm   \
        --without-dvipsk    \
        --without-gsftopk   \
        --without-lacheck   \
        --without-makeindexk\
        --without-musixflx  \
        --without-odvipsk   \
        --without-oxdvik    \
        --without-ps2pkm    \
        --without-seetexk   \
        --without-tetex     \
        --without-tex4htk   \
        --without-texlive   \
        --without-tth       \
        --without-xdvik     \
        --without-omega \
        | tee config.log
fi
#
cd texk/web2c || exit 1
chmod -f +w ctangleboot.c cweb.c cwebboot.c 
$MAKE -j $JOBS pdftex pdfetex |tee ../../make.log
if [ $STRIP = "TRUE" ] ; then strip $STRIPOPT pdf*tex ; fi
cd ../..
ls -l texk/web2c/pdf*tex
